php artisan serve: ejecuta el servidor de php para laravel

php artisan make:controller AlumnoController : este es el estandar para crear controladores

php artisan make:model Alumno : este es el estandar para crear un modelo

create composer-project laravel-laravel miProyecto 5.8.* : para instalar el framwork por la consola 

clase 2:

php artisan: muestra en la consola todas la utilidades que puedo usar con php artisan

php artisan make:controller productoController: Crea el controlador.

php artisan route:list : Muestra las distintas rutas en una lista.

php artisan make:controller Cursos/CursoController -r : Crea el controlador con todas sus rutas.

Clase 3:

Antes de hacer las migraciones:
1. En el archivo .env modificar el DB_DATABSE= 'nombre de la base de datos' (hay que crearla con anterioridad en phpmyadmin)
2.Modificar DB_USERNAME= 'root'
3. Modificar DB_PASSWORD = '' (vacio o la clave segun se necesite)

Para hacer migraciones

1.Intentar el comando php artisan migrate.
2.Si da error ejecutar el comando php artisan migrate:fresh (o intentar haciend el punto 5. y volver aqui al punto 2. luego 3. y 4. y ya no hara falta hacer el 5.)
3.ejecutar de nuevo php artisan migrate
4.Luego podemos crear nuestro archivo de migracion. php artisan make:model Curso (que sea en singular y la primera letra mayuscula)
5.En la nueva migracion (app/providers/AppServiceProvider.php) agregar el use (use Illuminate\Support\Facades\Schema;) y en el metodo boot() agregar esto: Schema::defaultStringLength(191); hay que agregar si el mysql es mas antiguo que 5.7.7 porque si no dara error.
6.En (/config/app.php) buscar la application debug y cambiar el valor a true (para poder ver los debug)
7.Para agregar columnas a una tabla se puede hacer directamente en (/database/migration/su archivo) y en el metodo up se pueden establecer las columnas inidcando tipo de dato, nombre y si aceptara null u otras especificaciones
por ej. public function up()
    {
        Schema::create('cursos', function (Blueprint $table) {
            $table->bigIncrements('id');
            $table->string('titulo');
            $table->text('description')->nullable();
            $table->timestamps();
        });
    }
8. Podemos usar la herramienta "Tinker" que permite ejecutar instrucciones php en la consola
Por ejemplo podriamos usar algo asi: $cursos = App\Curso::all()
Esto asignaria el objeto que se genera en el registro a una variable que luego podemos manejar
9.Si queremos crear un modelo con ayuda de Eloquent ejecutamos: php artisan make:model 'nombre del modelo'
10.Tambien podemos crear un modelo con el Factory, su Migration y su Controller de una vez con el comando php artisan make:model 'nombre' -a
11.Si queremos ver nuestras rutas podemos ejecutar el comando php artisan route:list
12. Si queremos invocar valores de un objeto en nuestras vistas ver el archivo. (resources/views/cursos.blade.php)
13.Podemos modificar el metodo show de algun controlador para decirle a donde debera mostrar, como por ej.
public function show(Curso $curso)
    {
        return view('cursos.ver', compact('curso'));
    }
14.Esa referencia 'cursos.ver' debe ser creada en (/resources/views/'carpeta'ej:cursos) y dentro de ella el archivo ver.blade.php
15.Si queremos cambiar el nombre de una tabla y que esto no afecte ni las migrations, ni el modelo
debemos agregar al modelo como sigue el ej.
class Asesor extends Model
{
    protected $table = "asesores"; //de esta forma podemos establecer a que tabla hara referencia
}
Y ademas en la migration cambiar todo donde diga 'asesors' por 'asesores'


Nota curiosa: la instruccion dd($cursos); permite ver el objeto de una forma singular en el navegador ademas de que interrumpe alli la ejecucion que se este llevando a cabo en el controlador

Clase 4:

Veremos el CRUD en laravel

1.primero en el controlador de Curso
public function create()
    {
        return view('cursos.crear');
    }
2.Debemos crear esa vista en la ruta resources\view\cursos
	crear.blade.php
con la siguiente estructura
@extends('app')

@section('contenido')
    <h1>Nuevo Curso</h1>
    <ul>
        @foreach($errors->all() as $error)
        <li style="color:red">{{ $error }}</li>
        @endforeach
    </ul>
    <form action="{{ route('curso.store') }}" method="post">
        @csrf
        <label for="">Titulo</label><br>
        <input type="text" name="titulo">
        @error('titulo')
        <span>{{ $message }}</span>
        @enderror
        <br>
        <label for="">Descripcion</label><br>
        <textarea name="description" id="" cols="30" rows="10"></textarea><br><br>
        <button type="submit">Guardar</button>
    </form><br><br><br>
    <a href="{{ route('curso.index') }}"> Lista de cursos</a>
@endsection

3.Modificar el metodo store del controlador

public function store(CursoRequest $request)
    {
        //dd($request->all());

        //validar campos del formulario

        /* $this->validate(request(),
        ['titulo' => 'required',
        'description' => 'required']); */

        $curso = new Curso();
        $curso->titulo = $request->titulo;
        $curso->description = $request->description;
        $curso->save();

        return redirect()->route('curso.index');
    }

4. Para editar valores, modificar el metodo edit
public function edit(Curso $curso)
    {
        return view('cursos.editar', compact('curso'));
    }

5. Debemos crear la vista de edicion en la ruta resources\view\cursos
	editar.blade.php
con la siguiente estructura
@extends('app')

@section('contenido')
    <h1>Modificar Datos del Curso</h1>
    <form action="{{ route('curso.update', $curso) }}" method="post">
        @csrf
        @method('PUT')
        <label for="">Titulo</label><br>
        <input type="text" name="titulo" value="{{ $curso->titulo }}"><br>
        <label for="">Descripcion</label><br>
        <textarea name="description" id="" cols="30" rows="10">{{ $curso->description }}</textarea><br><br>
        <button type="submit">Guardar la edicion</button>
    </form><br><br><br>
    <a href="{{ route('curso.index') }}"> Lista de cursos</a>
@endsection

6. Cambiar el metodo update
{
        //dd($request->all(), $curso);
        
        $curso->titulo = $request->titulo;
        $curso->description = $request->description;
        $curso->save();

        return redirect()->route('curso.edit', $curso);
    }

7. Para eliminar en la vista general (index) de curso (curso.blade.php)
agregamos otra columna con un post al que le pasaremos el metodo DELETE como sigue
<td>
     <form action="{{route('curso.destroy',$curso) }}" method="post">
          @csrf
          @method('DELETE')
          <button type="submit">Eliminar Datos</button>
     </form>
</td>

8.Luego modificamos el metodo destroy en el controlador
{
        $curso->delete();
        return redirect()->route('curso.index');
   }

9. Para validar si queremos hacerlo en el controlador podemos hacerlo en los metodos (store y update)
y escribimos
$this->validate(request(),
        ['titulo' => 'required',
        'description' => 'required']);

10. Podemos crear el Request en App directamente para no escribir en los controladores lo creamos en la consola como sigue:
php artisan make:request CursoRequest

11. En el metodo autorize se puede editar por "roles" quienes pueden hacer modificaciones, para acciones practicas haremos 
el return "true".

12. En el metodo rule() del CursoRequest modificamos el return
return [
            'titulo' => ['required', new MayusculaRule()],
            'description' => 'required'
        ];

13. Debemos incluir en el encabezado del controlador el Request que acabamos de crear con la ayuda del "use"
use App\Http\Requests\CursoRequest;

14. Tambien podemos personalizar las reglas de los formularios creando Rule en la linea de comandos
php artisan make:rule MayusculaRule

15. En el MayusculaRule editamos el passes como lo queremos, en nuestro caso queriamos validar que los datos fueran solo en mayuscula
return strtoupper($value) === $value;

16. En el metodo message() del Rule podemos editar como queramos
return 'El :attribute debe ser en mayuscula.'

17. Debemos incluir la regla que acabamos de crear dentro del Request que lo vayamos a usar en nuesrtro caso lo usamos en CursoRequest
use App\Rules\MayusculaRule;

18. Si una de nuestras validaciones tiene mas de una accion necesario debemos recordar crear un array para ello como lo hicimos en rules() del CursoRequest
return [
            'titulo' => ['required', new MayusculaRule()],
            'description' => 'required'
        ];
en este caso para "titulo".

Nota: Revisar el siguiente enlace que aclara el problema con los parametros de ruta que se tuvo en el desafio 3.
https://laravel.com/docs/5.8/controllers#restful-naming-resource-routes

Listo.!!!
